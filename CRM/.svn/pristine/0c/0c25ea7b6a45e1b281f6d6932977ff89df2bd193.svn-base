<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhidi.system.dao.IFunctionDao">
	<resultMap id="BaseResultMap" type="com.zhidi.system.entity.Function">
		<id column="func_id" jdbcType="INTEGER" property="funcId" />
		<result column="func_name" jdbcType="VARCHAR" property="funcName" />
		<result column="func_url" jdbcType="VARCHAR" property="funcUrl" />
		<result column="func_code" jdbcType="VARCHAR" property="funcCode" />
		<result column="parent_id" jdbcType="INTEGER" property="parentId" />
		<result column="func_type" jdbcType="INTEGER" property="funcType" />
		<result column="status" jdbcType="INTEGER" property="status" />
		<result column="sort_num" jdbcType="INTEGER" property="sortNum" />
		<result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
		<result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	</resultMap>
	<resultMap type="com.zhidi.system.entity.Function" id="functionResultMap"
		extends="BaseResultMap">
		<association property="parentFunction" resultMap="BaseResultMap"
			columnPrefix="p_" />
	</resultMap>
	<sql id="basicColumns">
		func_id,func_name,func_url,func_code,parent_id,func_type,status,sort_num,create_time,update_time
	</sql>
	<sql id="funcColumns">
		f.func_id,f.func_name,f.func_url,f.func_code,f.parent_id,f.func_type,f.status,f.sort_num,f.create_time,f.update_time
	</sql>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from tb_functions
		where func_id = #{funcId,jdbcType=INTEGER}
	</delete>

	<insert id="insert" parameterType="com.zhidi.system.entity.Function">
		insert into tb_functions (func_name, func_url,
		func_code, parent_id, func_type,
		status, sort_num, create_time,
		update_time)
		values (#{funcName,jdbcType=VARCHAR},
		#{funcUrl,jdbcType=VARCHAR},
		#{funcCode,jdbcType=VARCHAR}, #{parentId,jdbcType=INTEGER}, #{funcType,jdbcType=INTEGER},
		#{status,jdbcType=INTEGER}, #{sortNum,jdbcType=INTEGER},
		#{createTime,jdbcType=TIMESTAMP},
		#{updateTime,jdbcType=TIMESTAMP})
	</insert>

	<update id="updateByPrimaryKey" parameterType="com.zhidi.system.entity.Function">
		update tb_functions
		set func_name = #{funcName,jdbcType=VARCHAR},
		func_url = #{funcUrl,jdbcType=VARCHAR},
		func_code = #{funcCode,jdbcType=VARCHAR},
		parent_id = #{parentId,jdbcType=INTEGER},
		func_type = #{funcType,jdbcType=INTEGER},
		status = #{status,jdbcType=INTEGER},
		sort_num = #{sortNum,jdbcType=INTEGER},
		create_time = #{createTime,jdbcType=TIMESTAMP},
		update_time = #{updateTime,jdbcType=TIMESTAMP}
		where func_id = #{funcId,jdbcType=INTEGER}
	</update>

	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="functionResultMap">
		select <include refid="funcColumns"/>, 
		p.func_id  p_func_id,
		p.func_name  p_func_name,
		p.func_url  p_func_url,
		p.func_code  p_func_code,
		p.parent_id  p_parent_id,
		p.func_type  p_func_type,
		p.status   p_status,
		p.sort_num   p_sort_num,
		p.create_time  p_create_time,
		p.update_time  p_update_time
		from tb_functions f join tb_functions p on f.parent_id=p.func_id
		where f.func_id = #{funcId,jdbcType=INTEGER}
	</select>

	<select id="selectAll" resultMap="functionResultMap">
		select <include refid="funcColumns"/>,
		p.func_id p_func_id,
		p.func_name p_func_name,
		p.func_url p_func_url,
		p.func_code p_func_code,
		p.parent_id p_parent_id,
		p.func_type p_func_type,
		p.status p_status,
		p.sort_num p_sort_num,
		p.create_time p_create_time,
		p.update_time p_update_time
		from tb_functions f left join tb_functions p on f.parent_id=p.func_id
		where f.status=1
	</select>


	<!-- 根据角色id和权限状态查询对应的权限信息 -->
	<select id="findByRoleIds" resultMap="BaseResultMap">
		select
		<include refid="basicColumns" />
		from tb_functions
		<where>
			<choose>
				<when test="status==null">
					status=1
				</when>
				<otherwise>
					status=#{status}
				</otherwise>
			</choose>
			<if test="roleIds!=null and !roleIds.isEmpty()">
				and func_id in(select distinct func_id from tb_role_function where
				role_id in
				<foreach collection="roleIds" item="roleId" open="(" close=")"
					separator=",">
					#{roleId}
				</foreach>
				)
			</if>
		</where>
	</select>

	<!-- 根据父权限id和角色id查询对应的权限信息 -->
	<select id="findByIdAndRoleIds" resultMap="BaseResultMap">
		select
		<include refid="basicColumns" />
		from tb_functions
		<where>
			<if test="funcType!=null">
				func_type=#{funcType}
			</if>
			<choose>
				<when test="parentId !=null">
					and parent_id=#{parentId}
				</when>
				<otherwise>
					and parent_id is null
				</otherwise>
			</choose>
			<if test="roleIds!=null and !roleIds.isEmpty()">
				and func_id in(select distinct func_id from tb_role_function where
				role_id in
				<foreach collection="roleIds" item="roleId" open="(" close=")"
					separator=",">
					#{roleId}
				</foreach>
				)
			</if>
		</where>
	</select>
	
	<select id="count" resultType="integer">
		select count(f.func_id)
		from tb_functions f left join tb_functions p on f.parent_id=p.func_id
		<where>
			<if test="con !=null and !con.isEmpty()">
				<if test="con.funcName!=null and con.funcName!=''">
					and f.func_name like concat('%',#{con.funcName},'%')
				</if>
				<if test="con.parentId!=null and con.parentId!=''">
					and f.parent_id =#{con.parentId}
				</if>
				<if test="con.status!=null and con.status!=''">
					and f.status=#{con.status}
				</if>
			</if>
		</where>
	</select>

	<select id="findByPage" resultMap="functionResultMap">
		select
		<include refid="funcColumns" />,
		p.func_id p_func_id,
		p.func_name p_func_name,
		p.func_url p_func_url,
		p.func_code p_func_code,
		p.parent_id p_parent_id,
		p.func_type p_func_type,
		p.status p_status,
		p.sort_num p_sort_num,
		p.create_time p_create_time,
		p.update_time p_update_time
		from tb_functions f left join tb_functions p on f.parent_id=p.func_id
		<where>
			<if test="con !=null and !con.isEmpty()">
				<if test="con.funcName!=null and con.funcName!=''">
					and f.func_name like concat('%',#{con.funcName},'%')
				</if>
				<if test="con.parentId!=null and con.parentId!=''">
					and f.parent_id =#{con.parentId}
				</if>
				<if test="con.status!=null and con.status!=''">
					and f.status=#{con.status}
				</if>
			</if>
		</where>
		limit #{offset},#{pageSize}
	</select>
	
	<select id="listParentFunction" resultMap="BaseResultMap">
		select distinct p.func_id ,
		p.func_name,
		p.func_url,
		p.func_code,
		p.parent_id,
		p.func_type,
		p.status,
		p.sort_num,
		p.create_time,
		p.update_time 
		from tb_functions p join tb_functions f on p.func_id=f.parent_id where f.parent_id is not null  
	</select>
	
	
	<!-- 根据角色id和权限状态查询对应的权限信息 -->
	<select id="findByRoleId" resultMap="BaseResultMap">
		select
		<include refid="basicColumns" />
		from tb_functions
		<where>
			<choose>
				<when test="status == null">
					status =1
				</when>
				<otherwise>
					status=#{status}
				</otherwise>
			</choose>
			<if test="roleId!=null">
				and func_id in(select func_id from tb_role_function where
				role_id=#{roleId})
			</if>

		</where>
	</select>
	
	<!-- 根据权限id删除对应的权限信息，可批量删除 -->
	<update id="deleteFunction">
		update tb_functions set status=2 where func_id in
		<foreach collection="funcIds" item="funcId" open="(" close=")" separator=",">
    	#{funcId}
    </foreach>
	</update>
</mapper>